import os
import zipfile
import tkinter as tk
from tkinter import filedialog, ttk
from pdf2image import convert_from_bytes
from PIL import Image
from datetime import datetime
from tqdm import tqdm
import shutil

def crop_and_save(image, output_folder, pdf_filename, page_number):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width, height = image.size
    left, top, right, bottom = 0, 0, width * 0.5, height * 0.5
    cropped_image = image.crop((left, top, right, bottom))

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    os.makedirs(output_folder, exist_ok=True)
    output_folder_cache = os.path.join(output_folder, "cache")
    os.makedirs(output_folder_cache, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG
    image_path = os.path.join(output_folder_cache, f"{pdf_filename}_page_{page_number}.jpg")
    cropped_image.save(image_path, "JPEG")
    return image_path

def convert_pdf_to_jpg(pdf_data, output_folder, pdf_filename, progress_bar, action_label):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF-—Ñ–∞–π–ª–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images = convert_from_bytes(pdf_data)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    os.makedirs(output_folder, exist_ok=True)

    total_pages = len(images)
    progress_bar["maximum"] = total_pages

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i, image in enumerate(images, start=1):
        image_path = crop_and_save(image, output_folder, pdf_filename, i)
        progress_bar["value"] = i
        action_label.config(text=f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i} –∏–∑ {total_pages} ({image_path})")
        app.update_idletasks()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ ProgressBar –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–π –Ω–∞–¥–ø–∏—Å–∏
    progress_bar.pack_forget()
    action_label.config(text="–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ë–æ—Å—Å")

def merge_images(output_folder, progress_bar, action_label):
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    cache_folder = os.path.join(output_folder, "cache")
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    final_folder = os.path.join(output_folder, f"final_{timestamp}")
    os.makedirs(final_folder, exist_ok=True)

    files = os.listdir(cache_folder)
    images = [f for f in files if f.lower().endswith((".jpg", ".png", ".bmp"))]

    if not images:
        return

    images.sort()

    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    grid_cols = 3
    grid_rows = 3
    images_per_grid = grid_cols * grid_rows

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å–µ—Ç–∫–µ
    for idx in tqdm(range(0, len(images), images_per_grid), desc="–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", unit=" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
        grid_images = images[idx:idx + images_per_grid]

        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        merged_width = 827 * grid_cols
        merged_height = 1170 * grid_rows

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        merged_image = Image.new("RGB", (merged_width, merged_height), (255, 255, 255))

        # –í—Å—Ç–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        for i, img_name in enumerate(grid_images):
            col = i % grid_cols
            row = i // grid_cols
            x_offset = col * 827
            y_offset = row * 1170

            img_path = os.path.join(cache_folder, img_name)
            img = Image.open(img_path)
            img = img.resize((827, 1170))
            merged_image.paste(img, (x_offset, y_offset))

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ "final"
        merged_image.save(os.path.join(final_folder, f"merged_result_{idx // images_per_grid + 1}.jpg"))

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ "cache" –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    shutil.rmtree(cache_folder)

def process_pdf_archive(archive_file, output_folder, progress_bar, action_label):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å PDF-—Ñ–∞–π–ª–∞–º–∏
    with zipfile.ZipFile(archive_file, 'r') as zip_file:
        for file_info in zip_file.infolist():
            if file_info.filename.endswith(".pdf"):
                pdf_data = zip_file.read(file_info)
                pdf_filename = file_info.filename.replace(".pdf", "")
                convert_pdf_to_jpg(pdf_data, output_folder, pdf_filename, progress_bar, action_label)

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF-—Ñ–∞–π–ª–æ–≤
        merge_images(output_folder, progress_bar, action_label)

def browse_archive():
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ä—Ö–∏–≤–∞ –∏ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    archive_file = filedialog.askopenfilename(filetypes=[("ZIP files", "*.zip")])
    if archive_file:
        output_folder = filedialog.askdirectory()
        if output_folder:
            # –°–æ–∑–¥–∞–Ω–∏–µ ProgressBar –∏ Label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_bar = ttk.Progressbar(app, length=200, mode="determinate")
            progress_bar.pack(pady=10)
            action_label = tk.Label(app, text="")
            action_label.pack()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å PDF-—Ñ–∞–π–ª–∞–º–∏
            process_pdf_archive(archive_file, output_folder, progress_bar, action_label)

app = tk.Tk()
app.title("PDF to JPG Converter for PDF Archives")
app.geometry("500x500")

watermark_label = tk.Label(app, text="ùíúùìÅùíªùí∂", font=("Arial", 24))
watermark_label.pack()

browse_button = tk.Button(app, text="–í—ã–±—Ä–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å PDF-—Ñ–∞–π–ª–∞–º–∏", command=browse_archive)
browse_button.pack(pady=10)

result_label = tk.Label(app, text="")
result_label.pack(pady=10)

bottom_label = tk.Label(app, text="–°–¥–µ–ª–∞–Ω–æ –¥–ª—è Akeso —Å –ª—é–±–æ–≤—å—é")
bottom_label.pack(side="bottom")

app.mainloop()
