import os
import zipfile
import tkinter as tk
from tkinter import filedialog, ttk
from pdf2image import convert_from_bytes
from PIL import Image
from datetime import datetime
from tqdm import tqdm
import shutil

class PDFConverterApp:
    def __init__(self, master):
        self.master = master
        self.master.title("PDF to JPG Converter for PDF Archives")
        self.master.geometry("400x350")

        # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞
        self.set_transparency(0.95)

        self.grid_cols_label = tk.Label(self.master, text="–°—Ç–æ–ª–±—Ü—ã:")
        self.grid_cols_label.pack()

        self.grid_cols_scale = tk.Scale(self.master, from_=3, to=6, orient=tk.HORIZONTAL, length=200, command=self.sync_sliders)
        self.grid_cols_scale.set(3)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.grid_cols_scale.pack()

        self.grid_rows_label = tk.Label(self.master, text="–°—Ç—Ä–æ–∫–∏:")
        self.grid_rows_label.pack()

        self.grid_rows_scale = tk.Scale(self.master, from_=3, to=6, orient=tk.HORIZONTAL, length=200, command=self.sync_sliders)
        self.grid_rows_scale.set(3)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.grid_rows_scale.pack()

        self.watermark_label = tk.Label(self.master, text="ùíúùìÅùíªùí∂", font=("Arial", 24))
        self.watermark_label.pack()

        self.browse_button = tk.Button(self.master, text="–í—ã–±—Ä–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å PDF-—Ñ–∞–π–ª–∞–º–∏", command=self.browse_archive)
        self.browse_button.pack(pady=10)

        self.result_label = tk.Label(self.master, text="")
        self.result_label.pack(pady=10)

        self.bottom_label = tk.Label(self.master, text="–°–¥–µ–ª–∞–Ω–æ –¥–ª—è Akeso —Å –ª—é–±–æ–≤—å—é")
        self.bottom_label.pack(side="bottom")

    def set_transparency(self, alpha):
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–∫–Ω–∞
        self.master.attributes('-alpha', alpha)

    def sync_sliders(self, *args):
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        cols_value = self.grid_cols_scale.get()
        rows_value = self.grid_rows_scale.get()
        
        if cols_value != rows_value:
            self.grid_rows_scale.set(cols_value)
        self.master.update_idletasks()

    def browse_archive(self):
        grid_cols = self.grid_cols_scale.get()
        grid_rows = self.grid_rows_scale.get()

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º grid_cols –∏ grid_rows
        self.process_pdf_archive(grid_cols, grid_rows)

    def crop_and_save(self, image, output_folder, pdf_filename, page_number):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = image.size
        left, top, right, bottom = 0, 0, width * 0.5, height * 0.5
        cropped_image = image.crop((left, top, right, bottom))

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        os.makedirs(output_folder, exist_ok=True)
        output_folder_cache = os.path.join(output_folder, "cache")
        os.makedirs(output_folder_cache, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG
        image_path = os.path.join(output_folder_cache, f"{pdf_filename}_page_{page_number}.jpg")
        cropped_image.save(image_path, "JPEG")
        return image_path

    def convert_pdf_to_jpg(self, pdf_data, output_folder, pdf_filename, progress_bar, action_label, grid_cols, grid_rows):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF-—Ñ–∞–π–ª–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = convert_from_bytes(pdf_data)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
        os.makedirs(output_folder, exist_ok=True)

        total_pages = len(images)
        progress_bar["maximum"] = total_pages

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, image in enumerate(images, start=1):
            image_path = self.crop_and_save(image, output_folder, pdf_filename, i)
            progress_bar["value"] = i
            action_label.config(text=f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i} –∏–∑ {total_pages} ({image_path})")
            self.master.update_idletasks()

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ ProgressBar –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–π –Ω–∞–¥–ø–∏—Å–∏
        progress_bar.pack_forget()
        action_label.config(text="–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ë–æ—Å—Å")

    def merge_images(self, output_folder, progress_bar, action_label, grid_cols, grid_rows):
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cache_folder = os.path.join(output_folder, "cache")
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        final_folder = os.path.join(output_folder, f"final_{timestamp}")
        os.makedirs(final_folder, exist_ok=True)

        files = os.listdir(cache_folder)
        images = [f for f in files if f.lower().endswith((".jpg", ".png", ".bmp"))]

        if not images:
            return

        images.sort()

        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_per_grid = grid_cols * grid_rows

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å–µ—Ç–∫–µ
        for idx in tqdm(range(0, len(images), images_per_grid), desc="–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", unit=" –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
            grid_images = images[idx:idx + images_per_grid]

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            merged_width = 827 * grid_cols
            merged_height = 1170 * grid_rows

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            merged_image = Image.new("RGB", (merged_width, merged_height), (255, 255, 255))

            # –í—Å—Ç–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for i, img_name in enumerate(grid_images):
                col = i % grid_cols
                row = i // grid_cols
                x_offset = col * 827
                y_offset = row * 1170

                img_path = os.path.join(cache_folder, img_name)
                img = Image.open(img_path)
                img = img.resize((827, 1170))
                merged_image.paste(img, (x_offset, y_offset))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ "final"
            merged_image.save(os.path.join(final_folder, f"merged_result_{idx // images_per_grid + 1}.jpg"))

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ "cache" –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        shutil.rmtree(cache_folder)

    def process_pdf_archive(self, grid_cols, grid_rows):
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ä—Ö–∏–≤–∞ –∏ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        archive_file = filedialog.askopenfilename(filetypes=[("ZIP files", "*.zip")])
        if archive_file:
            output_folder = filedialog.askdirectory()
            if output_folder:
                # –°–æ–∑–¥–∞–Ω–∏–µ ProgressBar –∏ Label –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_bar = ttk.Progressbar(self.master, length=200, mode="determinate")
                progress_bar.pack(pady=10)
                action_label = tk.Label(self.master, text="")
                action_label.pack()
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å PDF-—Ñ–∞–π–ª–∞–º–∏
                with zipfile.ZipFile(archive_file, 'r') as zip_file:
                    for file_info in zip_file.infolist():
                        if file_info.filename.endswith(".pdf"):
                            pdf_data = zip_file.read(file_info)
                            pdf_filename = file_info.filename.replace(".pdf", "")
                            self.convert_pdf_to_jpg(pdf_data, output_folder, pdf_filename, progress_bar, action_label, grid_cols, grid_rows)

                    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF-—Ñ–∞–π–ª–æ–≤
                    self.merge_images(output_folder, progress_bar, action_label, grid_cols, grid_rows)

if __name__ == "__main__":
    root = tk.Tk()
    app = PDFConverterApp(root)
    root.mainloop()
